.ig
Copyright (C) 2001 Scott Finneran
Copyright (C) 2003 Intel Corporation
Copyright (C) 2003 Theodore A. Roth

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the Free Software Foundation instead of in
the original English.

$Id$

..
.TH avarice 1 "December 6, 2003"
.LO 1
.SH NAME
avarice \- Provides an interface from avr-gdb to Atmel's JTAGICE box.
.SH SYNOPSIS
.B avarice
[\fIOPTIONS\fR]... [[\fIHOST_NAME\fR]:\fIPORT\fR]
.SH DESCRIPTION
.PP
AVaRICE runs on a POSIX machine and connects to gdb via a TCP socket and
communicates via gdb's "serial debug protocol". This protocol allows gdb to
send commands like "set/remove breakpoint" and "read/write memory".
.PP
AVaRICE translates these commands into the Atmel protocol used to control the
AVR JTAG ICE. Connection to the AVR JTAG ICE is via a serial port on the POSIX
machine.
.PP
Because the GDB <---> AVaRICE connection is via a TCP socket, the two programs
do not need to run on the same machine. In an office environment, this allows
a developer to debug a target in the lab from the comfort of their cube (or
even better, their home!)
.HP 6
.B NOTE:
Even though you can run \fBavarice\fR and \fBavr\-gdb\fR on different systems,
it is not recommended because of the security risk involved. \fBavarice\fR was
not designed to be a secure server. There is no authentication performed
when a client connects to \fBavarice\fR when it is running in gdb server mode.
.SS Supported Devices
.B avarice
currently has support for the following devices:
.RS 4
atmega16
.br
atmega162
.br
atmega169
.br
atmega323
.br
atmega32
.br
atmega64
.br
atmega128
.RE
.SS Supported File Formats
.B avarice
uses libbfd for reading input files. As such, it can handle any file format
that libbfd knowns about. This includes the Intel Hex, Motorola SRecord and
ELF formats, among others. If you tell \fBavarice\fR to read an ELF file, it
will automatically handle programming all of the sections contained in the
file (e.g. flash, eeprom, etc.).
.SH OPTIONS
.TP
.BR \-h ,\  \-\-help
Print this message.
.TP
.BR \-d ,\  \-\-debug
Enable printing of debug information.
.TP
.BR \-D ,\  \-\-detach
Detach once synced with JTAG ICE
.TP
.BR \-C ,\  \-\-capture
Capture running program.
.br
Note: debugging must have been enabled prior to starting the program. (e.g.,
by running avarice earlier)
.TP
.BR \-I ,\  \-\-ignore-intr
Automatically step over interrupts.
.br
Note: EXPERIMENTAL. Can not currently handle
devices fused for compatibility.
.TP
.BR \-f ,\  \-\-file \ <filename>
Specify a file for use with the --program and --verify options. If --file is
passed and neither --program or --verify are given then --program is implied.
.TP
.BR \-j ,\  \-\-jtag \ <devname>
Port attached to JTAG box (default: /dev/avrjtag).
.TP
.BR \-B ,\  \-\-jtag-bitrate \ <rate>
Set the bitrate that the JTAG box communicates with the avr target device.
This must be less than 1/4 of the frequency of the target. Valid values are
1MHz, 500KHz, 250KHz or 125KHz. (default: 1MHz)
.TP
.BR \-p ,\  \-\-program
Erase and program target. Binary filename must be specified with --file
option.
.TP
.BR \-v ,\  \-\-verify
Verify program in device against file specified with --file option.
.TP
.BR \-e ,\  \-\-erase
Erase target.
.TP
.BR \-r ,\  \-\-read-fuses
Read fuses bytes.
.TP
.BR \-W ,\  \-\-write-fuses \ <eehhll>
Write fuses bytes. \fBee\fR is the extended fuse byte, \fBhh\fR is the high
fuse byte and \fBll\fR is the low fuse byte. The fuse byte data must be given
in two digit hexidecimal format with zero padding if needed. All three bytes
must currently be given.
.br
NOTE: Current, if the target device doesn't have an extended fuse byte
(e.g. the atmega16), the you should set ee==ll when writing the fuse bytes.
.TP
.BR \-L ,\  \-\-write-lockbits \ <ll>
Write lock bits. The lock byte data must be given in two digit hexidecimal
format with zero padding if needed.
.TP
.BR \-P ,\  \-\-part <name>
Target device name (e.g. atmega16)
.PP
\fIHOST_NAME\fR defaults to 0.0.0.0 (listen on any interface) if not given.
.PP
:\fIPORT\fR is required to put avarice into gdb server mode.
.SH EXAMPLE USAGE
avarice --program --file test.bin --jtag /dev/ttyS0 :4242
.SH DEBUGGING WITH AVARICE
The JTAG ICE debugging environment has a few restrictions and changes:
.IP \(bu 4
No "soft" breakpoints, and only three hardware breakpoints. The break
command sets hardware breakpoints. The easiest way to deal with this
restriction is to enable and disable breakpoints as needed.
.IP \(bu
Two 1-byte hardware watchpoints (but each hardware watchpoint takes away
one hardware breakpoint). If you set a watchpoint on a variable which takes
more than one byte, execution will be abysmally slow. Instead it is better
to do the following:
.IP
.RS 6
watch *(char *)&myvariable
.RE
.IP
which watches the least significant byte of
.BR myvariable .
.IP \(bu
The Atmel AVR processors have a Harvard architecture (separate code and
data buses). To distinguish data address 0 from code address 0,
.B avr-gdb
adds 0x800000 to all data addresses. Bear this in mind when examining
printed pointers, or when passing absolute addresses to gdb commands.
.SH SEE ALSO
.BR gdb (1),
.BR avr\-gdb (1),
.BR insight (1),
.BR avr\-insight (1),
.BR ice\-gdb (1),
.BR ice\-insight (1)
.SH AUTHORS
Avarice (up to version 1.5) was originally written by Scott Finneran with help
from Peter Jansen. They did the work of figuring out the jtagice communication
protocol before Atmel released the spec (appnote AVR060).
.PP
David Gay made major improvements bringing avarice up to 2.0.
